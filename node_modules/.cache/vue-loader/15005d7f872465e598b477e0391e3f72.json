{"remainingRequest":"C:\\Users\\alade\\Desktop\\kaffir\\kaffir\\kaffir-frontend\\kaffir\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\alade\\Desktop\\kaffir\\kaffir\\kaffir-frontend\\kaffir\\src\\components\\public\\chat.vue?vue&type=template&id=5d94025e&","dependencies":[{"path":"C:\\Users\\alade\\Desktop\\kaffir\\kaffir\\kaffir-frontend\\kaffir\\src\\components\\public\\chat.vue","mtime":1613167485409},{"path":"C:\\Users\\alade\\Desktop\\kaffir\\kaffir\\kaffir-frontend\\kaffir\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\alade\\Desktop\\kaffir\\kaffir\\kaffir-frontend\\kaffir\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\alade\\Desktop\\kaffir\\kaffir\\kaffir-frontend\\kaffir\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\alade\\Desktop\\kaffir\\kaffir\\kaffir-frontend\\kaffir\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxkaXYgY2xhc3M9ImNvbnRhaW5lciBib290c3RyYXAgc25pcHBldHMgYm9vdGRleSI+CiAgICAgICAgPGRpdiBjbGFzcz0idGlsZSB0aWxlLWFsdCIgaWQ9Im1lc3NhZ2VzLW1haW4iPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtcy1tZW51Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1zLXVzZXIgY2xlYXJmaXgiPgogICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL2Jvb3RkZXkuY29tL2ltZy9Db250ZW50L2F2YXRhci9hdmF0YXIxLnBuZyIgYWx0PSIiIGNsYXNzPSJpbWctYXZhdGFyIHB1bGwtbGVmdCI+CiAgICAgICAgICAgICAgICAgICAgPGRpdj5TaWduZWQgaW4gYXMgPGJyPiBtLWhvbGxhd2F5QGdtYWlsLmNvbTwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwLTE1Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkcm9wZG93biI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJidG4gYnRuLXByaW1hcnkgYnRuLWJsb2NrIiBocmVmPSIiIGRhdGEtdG9nZ2xlPSJkcm9wZG93biI+YWN0aXZlIHJvb21zIDxpIGNsYXNzPSJjYXJldCBtLWwtNSI+PC9pPjwvYT4KICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkcm9wZG93bi1tZW51IGRtLWljb24gdy0xMDAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9IiI+PGkgY2xhc3M9ImZhIGZhLWVudmVsb3BlIj48L2k+IE1lc3NhZ2VzPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iIj48aSBjbGFzcz0iZmEgZmEtdXNlcnMiPjwvaT4gQ29udGFjdHM8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIiPjxpIGNsYXNzPSJmYSBmYS1mb3JtYXQtbGlzdC1idWxsZXRlZCI+IDwvaT5Ub2RvIExpc3RzPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGlzdC1ncm91cCBsZy1hbHQiPgogICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJsaXN0LWdyb3VwLWl0ZW0gbWVkaWEiIGhyZWY9IiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB1bGwtbGVmdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly9ib290ZGV5LmNvbS9pbWcvQ29udGVudC9hdmF0YXIvYXZhdGFyMi5wbmciIGFsdD0iIiBjbGFzcz0iaW1nLWF2YXRhciI+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWRpYS1ib2R5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz0ibGlzdC1ncm91cC1pdGVtLWhlYWRpbmciPkRhdmlsIFBhcm5lbGw8L3NtYWxsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPSJsaXN0LWdyb3VwLWl0ZW0tdGV4dCBjLWdyYXkiPkZpZXJlbnQgZmFzdGlkaWkgcmVjdGVxdWUgYWQgcHJvPC9zbWFsbD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJsaXN0LWdyb3VwLWl0ZW0gbWVkaWEiIGhyZWY9IiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB1bGwtbGVmdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly9ib290ZGV5LmNvbS9pbWcvQ29udGVudC9hdmF0YXIvYXZhdGFyMy5wbmciIGFsdD0iIiBjbGFzcz0iaW1nLWF2YXRhciI+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWRpYS1ib2R5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imxpc3QtZ3JvdXAtaXRlbS1oZWFkaW5nIj5Bbm4gV2F0a2luc29uPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c21hbGwgY2xhc3M9Imxpc3QtZ3JvdXAtaXRlbS10ZXh0IGMtZ3JheSI+Q3VtIHNvY2lpcyBuYXRvcXVlIHBlbmF0aWJ1cyA8L3NtYWxsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9Imxpc3QtZ3JvdXAtaXRlbSBtZWRpYSIgaHJlZj0iIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHVsbC1sZWZ0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL2Jvb3RkZXkuY29tL2ltZy9Db250ZW50L2F2YXRhci9hdmF0YXI0LnBuZyIgYWx0PSIiIGNsYXNzPSJpbWctYXZhdGFyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZGlhLWJvZHkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGlzdC1ncm91cC1pdGVtLWhlYWRpbmciPk1hcnNlIFdhbHRlcjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPSJsaXN0LWdyb3VwLWl0ZW0tdGV4dCBjLWdyYXkiPlN1c3BlbmRpc3NlIHNhcGllbiBsaWd1bGE8L3NtYWxsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9Imxpc3QtZ3JvdXAtaXRlbSBtZWRpYSIgaHJlZj0iIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibHYtYXZhdGFyIHB1bGwtbGVmdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly9ib290ZGV5LmNvbS9pbWcvQ29udGVudC9hdmF0YXIvYXZhdGFyNS5wbmciIGFsdD0iIiBjbGFzcz0iaW1nLWF2YXRhciI+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWRpYS1ib2R5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imxpc3QtZ3JvdXAtaXRlbS1oZWFkaW5nIj5KZXJlbXkgUm9iYmluczwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPSJsaXN0LWdyb3VwLWl0ZW0tdGV4dCBjLWdyYXkiPlBoYXNlbGx1cyBwb3J0dGl0b3IgdGVsbHVzIG5lYzwvc21hbGw+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibGlzdC1ncm91cC1pdGVtIG1lZGlhIiBocmVmPSIiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsdi1hdmF0YXIgcHVsbC1sZWZ0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL2Jvb3RkZXkuY29tL2ltZy9Db250ZW50L2F2YXRhci9hdmF0YXI2LnBuZyIgYWx0PSIiIGNsYXNzPSJpbWctYXZhdGFyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZGlhLWJvZHkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGlzdC1ncm91cC1pdGVtLWhlYWRpbmciPlJlZ2luYWxkIEhvcmFjZTwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPSJsaXN0LWdyb3VwLWl0ZW0tdGV4dCBjLWdyYXkiPlF1aXNxdWUgY29uc2VxdWF0IGFyY3UgZWdldDwvc21hbGw+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibGlzdC1ncm91cC1pdGVtIG1lZGlhIiBocmVmPSIiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwdWxsLWxlZnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vYm9vdGRleS5jb20vaW1nL0NvbnRlbnQvYXZhdGFyL2F2YXRhcjcucG5nIiBhbHQ9IiIgY2xhc3M9ImltZy1hdmF0YXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVkaWEtYm9keSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsaXN0LWdyb3VwLWl0ZW0taGVhZGluZyI+U2hhcmsgSGVucnk8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz0ibGlzdC1ncm91cC1pdGVtLXRleHQgYy1ncmF5Ij5OYW0gbG9ib3J0aXMgb2RpbyBldCBsZW8gbWF4aW11PC9zbWFsbD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJsaXN0LWdyb3VwLWl0ZW0gbWVkaWEiIGhyZWY9IiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB1bGwtbGVmdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly9ib290ZGV5LmNvbS9pbWcvQ29udGVudC9hdmF0YXIvYXZhdGFyMS5wbmciIGFsdD0iIiBjbGFzcz0iaW1nLWF2YXRhciI+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWRpYS1ib2R5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imxpc3QtZ3JvdXAtaXRlbS1oZWFkaW5nIj5QYXVsIFZhbiBEYWNrPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c21hbGwgY2xhc3M9Imxpc3QtZ3JvdXAtaXRlbS10ZXh0IGMtZ3JheSI+TmFtIHBvc3VlcmUgcHVydXMgc2VkIHZlbGl0IGF1Y3RvciBzb2RhbGVzPC9zbWFsbD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJsaXN0LWdyb3VwLWl0ZW0gbWVkaWEiIGhyZWY9IiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imx2LWF2YXRhciBwdWxsLWxlZnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vYm9vdGRleS5jb20vaW1nL0NvbnRlbnQvYXZhdGFyL2F2YXRhcjIucG5nIiBhbHQ9IiIgY2xhc3M9ImltZy1hdmF0YXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVkaWEtYm9keSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsaXN0LWdyb3VwLWl0ZW0taGVhZGluZyI+SmFtZXMgQW5kZXJzb248L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz0ibGlzdC1ncm91cC1pdGVtLXRleHQgYy1ncmF5Ij5WaXZhbXVzIGltcGVyZGlldCBzYWdpdHRpcyBxdWFtPC9zbWFsbD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJsaXN0LWdyb3VwLWl0ZW0gbWVkaWEiIGhyZWY9IiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imx2LWF2YXRhciBwdWxsLWxlZnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vYm9vdGRleS5jb20vaW1nL0NvbnRlbnQvYXZhdGFyL2F2YXRhcjMucG5nIiBhbHQ9IiIgY2xhc3M9ImltZy1hdmF0YXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVkaWEtYm9keSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsaXN0LWdyb3VwLWl0ZW0taGVhZGluZyI+S2FuZSBXaWxsaWFtczwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPSJsaXN0LWdyb3VwLWl0ZW0tdGV4dCBjLWdyYXkiPlN1c3BlbmRpc3NlIGp1c3RvIG51bGxhIGx1Y3R1cyBuZWM8L3NtYWxsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAKICAgICAgICAgICAgPGRpdiBjbGFzcz0ibXMtYm9keSI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoZWFkZXItaG9vbGRlci1zbSI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYWN0aW9uLWhlYWRlciBjbGVhcmZpeCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InZpc2libGUteHMiIGlkPSJtcy1tZW51LXRyaWdnZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLWJhcnMiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwdWxsLWxlZnQgaGlkZGVuLXhzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL2Jvb3RkZXkuY29tL2ltZy9Db250ZW50L2F2YXRhci9hdmF0YXIyLnBuZyIgYWx0PSIiIGNsYXNzPSJpbWctYXZhdGFyIG0tci0xMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsdi1hdmF0YXIgcHVsbC1sZWZ0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+YWxhZGVzaXVuIHRlbWl0b3BlPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImFoLWFjdGlvbnMgYWN0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRyb3Bkb3duIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIiIGRhdGEtdG9nZ2xlPSJkcm9wZG93biIgYXJpYS1leHBhbmRlZD0iZmFsc2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc29ydCI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImRyb3Bkb3duLW1lbnUgZHJvcGRvd24tbWVudS1yaWdodCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiI+TGF0ZXN0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIiPk9sZGVzdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkcm9wZG93biI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIiBkYXRhLXRvZ2dsZT0iZHJvcGRvd24iIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLWJhcnMiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkcm9wZG93bi1tZW51IGRyb3Bkb3duLW1lbnUtcmlnaHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIiPlJlZnJlc2g8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiI+TWVzc2FnZSBTZXR0aW5nczwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYWxsLW1lc3NhZ2VzIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZXNzYWdlLWZlZWQgbWVkaWEiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwdWxsLWxlZnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vYm9vdGRleS5jb20vaW1nL0NvbnRlbnQvYXZhdGFyL2F2YXRhcjEucG5nIiBhbHQ9IiIgY2xhc3M9ImltZy1hdmF0YXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVkaWEtYm9keSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZi1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBRdWlzcXVlIGNvbnNlcXVhdCBhcmN1IGVnZXQgb2RpbyBjdXJzdXMsIHV0IHRlbXBvciBhcmN1IHZlc3RpYnVsdW0uIEV0aWFtIGV4IGFyY3UsIHBvcnRhIGEgdXJuYSBub24sIGxhY2luaWEgcGVsbGVudGVzcXVlIG9yY2kuIFByb2luIHNlbXBlciBzYWdpdHRpcyBlcmF0LCBlZ2V0IGNvbmRpbWVudHVtIHNhcGllbiB2aXZlcnJhIGV0LiBNYXVyaXMgdm9sdXRwYXQgbWFnbmEgbmliaCwgZXQgY29uZGltZW50dW0gZXN0IHJ1dHJ1bSBhLiBOdW5jIHNlZCB0dXJwaXMgbWkuIEluIGV1IG1hc3NhIGEgc2VtIHB1bHZpbmFyIGxvYm9ydGlzLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c21hbGwgY2xhc3M9Im1mLWRhdGUiPjxpIGNsYXNzPSJmYSBmYS1jbG9jay1vIj48L2k+IDIwLzAyLzIwMTUgYXQgMDk6MDA8L3NtYWxsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZXNzYWdlLWZlZWQgcmlnaHQiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwdWxsLXJpZ2h0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL2Jvb3RkZXkuY29tL2ltZy9Db250ZW50L2F2YXRhci9hdmF0YXIyLnBuZyIgYWx0PSIiIGNsYXNzPSJpbWctYXZhdGFyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZGlhLWJvZHkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWYtY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWF1cmlzIHZvbHV0cGF0IG1hZ25hIG5pYmgsIGV0IGNvbmRpbWVudHVtIGVzdCBydXRydW0gYS4gTnVuYyBzZWQgdHVycGlzIG1pLiBJbiBldSBtYXNzYSBhIHNlbSBwdWx2aW5hciBsb2JvcnRpcy4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPSJtZi1kYXRlIj48aSBjbGFzcz0iZmEgZmEtY2xvY2stbyI+PC9pPiAyMC8wMi8yMDE1IGF0IDA5OjMwPC9zbWFsbD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVzc2FnZS1mZWVkIG1lZGlhIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHVsbC1sZWZ0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL2Jvb3RkZXkuY29tL2ltZy9Db250ZW50L2F2YXRhci9hdmF0YXIxLnBuZyIgYWx0PSIiIGNsYXNzPSJpbWctYXZhdGFyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZGlhLWJvZHkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWYtY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRXRpYW0gZXggYXJjdW1lbnR1bQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c21hbGwgY2xhc3M9Im1mLWRhdGUiPjxpIGNsYXNzPSJmYSBmYS1jbG9jay1vIj48L2k+IDIwLzAyLzIwMTUgYXQgMDk6MzM8L3NtYWxsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZXNzYWdlLWZlZWQgcmlnaHQiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwdWxsLXJpZ2h0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL2Jvb3RkZXkuY29tL2ltZy9Db250ZW50L2F2YXRhci9hdmF0YXIyLnBuZyIgYWx0PSIiIGNsYXNzPSJpbWctYXZhdGFyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZGlhLWJvZHkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWYtY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRXRpYW0gbmVjIGZhY2lsaXNpcyBsYWN1cy4gTnVsbGEgaW1wZXJkaWV0IGF1Z3VlIHVsbGFtY29ycGVyIGR1aSB1bGxhbWNvcnBlciwgZXUgbGFvcmVldCBzZW0gY29uc2VjdGV0dXIuIEFlbmVhbiBldCBsaWd1bGEgcmlzdXMuIFByYWVzZW50IHNlZCBwb3N1ZXJlIHNlbS4gQ3VtIHNvY2lpcyBuYXRvcXVlIHBlbmF0aWJ1cyBldCBtYWduaXMgZGlzIHBhcnR1cmllbnQgbW9udGVzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c21hbGwgY2xhc3M9Im1mLWRhdGUiPjxpIGNsYXNzPSJmYSBmYS1jbG9jay1vIj48L2k+IDIwLzAyLzIwMTUgYXQgMTA6MTA8L3NtYWxsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZXNzYWdlLWZlZWQgbWVkaWEiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwdWxsLWxlZnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly9ib290ZGV5LmNvbS9pbWcvQ29udGVudC9hdmF0YXIvYXZhdGFyMS5wbmciIGFsdD0iIiBjbGFzcz0iaW1nLWF2YXRhciI+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWRpYS1ib2R5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1mLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEN1bSBzb2NpaXMgbmF0b3F1ZSBwZW5hdGlidXMgZXQgbWFnbmlzIGRpcyBwYXJ0dXJpZW50IG1vbnRlcywgbmFzY2V0dXIgcmlkaWN1bHVzIG11cy4gRXRpYW0gYWMgdG9ydG9yIHV0IGVsaXQgc29kYWxlcyB2YXJpdXMuIE1hdXJpcyBpZCBpcHN1bSBpZCBtYXVyaXMgbWFsZXN1YWRhIHRpbmNpZHVudC4gVmVzdGlidWx1bSBlbGl0IG1hc3NhLCBwdWx2aW5hciBhdCBzYXBpZW4gc2VkLCBsdWN0dXMgdmVzdGlidWx1bSBlcm9zLiBFdGlhbSBmaW5pYnVzIHRyaXN0aXF1ZSBhbnRlLCB2aXRhZSByaG9uY3VzIHNhcGllbiB2b2x1dHBhdCBlZ2V0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz0ibWYtZGF0ZSI+PGkgY2xhc3M9ImZhIGZhLWNsb2NrLW8iPjwvaT4gMjAvMDIvMjAxNSBhdCAxMDoyNDwvc21hbGw+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lc3NhZ2UtZmVlZCBtZWRpYSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB1bGwtbGVmdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly9ib290ZGV5LmNvbS9pbWcvQ29udGVudC9hdmF0YXIvYXZhdGFyMS5wbmciIGFsdD0iIiBjbGFzcz0iaW1nLWF2YXRhciI+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWRpYS1ib2R5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1mLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEN1bSBzb2NpaXMgbmF0b3F1ZSBwZW5hdGlidXMgZXQgbWFnbmlzIGRpcyBwYXJ0dXJpZW50IG1vbnRlcywgbmFzY2V0dXIgcmlkaWN1bHVzIG11cy4gRXRpYW0gYWMgdG9ydG9yIHV0IGVsaXQgc29kYWxlcyB2YXJpdXMuIE1hdXJpcyBpZCBpcHN1bSBpZCBtYXVyaXMgbWFsZXN1YWRhIHRpbmNpZHVudC4gVmVzdGlidWx1bSBlbGl0IG1hc3NhLCBwdWx2aW5hciBhdCBzYXBpZW4gc2VkLCBsdWN0dXMgdmVzdGlidWx1bSBlcm9zLiBFdGlhbSBmaW5pYnVzIHRyaXN0aXF1ZSBhbnRlLCB2aXRhZSByaG9uY3VzIHNhcGllbiB2b2x1dHBhdCBlZ2V0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz0ibWYtZGF0ZSI+PGkgY2xhc3M9ImZhIGZhLWNsb2NrLW8iPjwvaT4gMjAvMDIvMjAxNSBhdCAxMDoyNDwvc21hbGw+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJib3QgY29udGFpbmVyIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhY3Rpb24taGVhZGUgY2xlYXJmaXggYm90LWNudCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYXIgZmEtaW1hZ2VzIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtbWljcm9waG9uZSI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnAtc2VjIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYXIgZmEtc21pbGUiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gPGkgY2xhc3M9ImZhbCBmYS1wYXBlci1wbGFuZSI+PC9pPiAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhciBmYS1wYXBlci1wbGFuZSI+PC9pPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PiAKICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo="},null]}