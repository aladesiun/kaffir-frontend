{"remainingRequest":"C:\\Users\\alade\\Desktop\\kaffir\\kaffir\\kaffir-frontend\\kaffir\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\alade\\Desktop\\kaffir\\kaffir\\kaffir-frontend\\kaffir\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\alade\\Desktop\\kaffir\\kaffir\\kaffir-frontend\\kaffir\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\alade\\Desktop\\kaffir\\kaffir\\kaffir-frontend\\kaffir\\src\\components\\public\\chat.vue?vue&type=template&id=5d94025e&","dependencies":[{"path":"C:\\Users\\alade\\Desktop\\kaffir\\kaffir\\kaffir-frontend\\kaffir\\src\\components\\public\\chat.vue","mtime":1614026203631},{"path":"C:\\Users\\alade\\Desktop\\kaffir\\kaffir\\kaffir-frontend\\kaffir\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\alade\\Desktop\\kaffir\\kaffir\\kaffir-frontend\\kaffir\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\alade\\Desktop\\kaffir\\kaffir\\kaffir-frontend\\kaffir\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\alade\\Desktop\\kaffir\\kaffir\\kaffir-frontend\\kaffir\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}